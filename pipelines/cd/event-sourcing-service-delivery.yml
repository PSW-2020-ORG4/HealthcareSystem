trigger:
  batch: true
  branches:
    include:
    - develop
  paths:
    include:
    - 'HealthcareSystem/EventSourcingService/*'
pr: none

pool:
  vmImage: 'ubuntu-18.04'

variables:
  dockerRegistry: 'pufkedockerhub'
  project: 'HealthcareSystem/EventSourcingService/EventSourcingService.csproj'
  dockerfile: 'HealthcareSystem/EventSourcingService/Dockerfile'
  dockerImage: 'pufke/eventsourcingservice'
  herokuProject: 'psw-event-store'

stages:
- stage: CI
  jobs:
  - job: Docker
    steps:
    - task: Bash@3
      displayName: 'Prepare context for Docker'
      inputs:
        targetType: 'inline'
        script: |
          docker --version
          dotnet publish $(project) -c Release -o publish
          cp $(dockerfile) publish/Dockerfile  
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        containerRegistry: '$(dockerRegistry)'
        repository: '$(dockerImage)'
        command: 'buildAndPush'
        Dockerfile: 'publish/Dockerfile'
        buildContext: 'publish'
        tags: |
          $(Build.BuildId)
          latest

- stage: Prepare
  displayName: Reset event database
  variables:
    HEROKU_API_KEY: a191be3d-3484-49dc-a542-8f47c02c1ad9
  jobs:  
  - job: ResetDb
    displayName: Reset database
    steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '3.1.x'
      - task: PowerShell@2
        displayName: "Generate SQL script"
        inputs:
          targetType: 'inline'
          script: |
            echo "----- Installing EF Core. -----"
            dotnet tool install --global dotnet-ef --version 3.1.9
            echo "----- Generating script. -----"
            dotnet-ef dbcontext script -p "./HealthcareSystem/EventSourcingService/EventSourcingService.csproj" -o init.sql
          pwsh: true
      - task: PowerShell@2
        displayName: "Initialize Heroku Postgres"
        inputs:
          targetType: 'inline'
          script: |
            echo "----- Reseting database. -----"
            heroku pg:reset DATABASE_URL --app psw-event-store --confirm psw-event-store
            echo "----- Initializing database. -----"
            Get-Content init.sql | heroku pg:psql DATABASE_URL --app psw-event-store
          pwsh: true     

- stage: CD
  variables:
    HEROKU_API_KEY: a191be3d-3484-49dc-a542-8f47c02c1ad9
  jobs:
  - deployment: EventSourcingService  
    environment: 'Test'
    strategy:
      runOnce:
        deploy:                 
          steps:
            - task: PowerShell@2
              displayName: "Heroku Deployment"
              inputs:
                targetType: 'inline'
                script: |
                  echo "----- Logging in to Heroku registry. -----"
                  heroku container:login
                  echo '----- Pulling image from DockerHub. -----'
                  docker pull $(dockerImage)
                  echo '----- Pushing to Heroku registry. -----'
                  docker tag $(dockerImage) registry.heroku.com/$(herokuProject)/web
                  docker push registry.heroku.com/$(herokuProject)/web
                  echo '----- Releasing app. -----'
                  heroku container:release web --app $(herokuProject)
                pwsh: true

- stage: Verify
  displayName: Verify deployment
  jobs:
    - job: Smoke
      steps:
      - task: PowerShell@2
        displayName: "Ping test"
        inputs:
          filePath: 'pipelines/cd/smoke.ps1'
          arguments: '-uri https://$(herokuProject).herokuapp.com/api/ping -code 200'
          pwsh: true