// <auto-generated />
using System;
using Backend.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Users.City", b =>
                {
                    b.Property<int>("ZipCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ZipCode");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ZipCode = 21000,
                            Name = "Novi Sad"
                        });
                });

            modelBuilder.Entity("Model.Users.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CommentatorJmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorJmbg");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Zadovoljan sam uslugama bolnice.",
                            CommentatorJmbg = "2305992104895",
                            IsPublished = true
                        });
                });

            modelBuilder.Entity("Model.Users.User", b =>
                {
                    b.Property<string>("Jmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("CityZipCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Jmbg");

                    b.HasIndex("CityZipCode");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Model.Users.Admin", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Jmbg = "0606960851265",
                            CityZipCode = 21000,
                            DateOfBirth = new DateTime(1960, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Gender = 0,
                            HomeAddress = "",
                            Name = "Pera",
                            Password = "123",
                            Phone = "",
                            Surname = "Perić",
                            Username = "pera"
                        });
                });

            modelBuilder.Entity("Model.Users.Patient", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.Property<DateTime>("DateOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Jmbg = "2305992104895",
                            CityZipCode = 21000,
                            DateOfBirth = new DateTime(1992, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Gender = 0,
                            HomeAddress = "",
                            Name = "Marko",
                            Password = "123",
                            Phone = "",
                            Surname = "Marković",
                            Username = "marko",
                            DateOfRegistration = new DateTime(2020, 11, 3, 14, 12, 18, 295, DateTimeKind.Local).AddTicks(2873),
                            IsGuest = true
                        });
                });

            modelBuilder.Entity("Model.Users.Feedback", b =>
                {
                    b.HasOne("Model.Users.Patient", "Commentator")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CommentatorJmbg");
                });

            modelBuilder.Entity("Model.Users.User", b =>
                {
                    b.HasOne("Model.Users.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityZipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
